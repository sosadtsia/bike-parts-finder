apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-consumer
  namespace: app
  labels:
    app: kafka-consumer
    region: us-east-2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kafka-consumer
  template:
    metadata:
      labels:
        app: kafka-consumer
        env: ${ENVIRONMENT:-develop}
    spec:
      containers:
      - name: consumer
        image: ${REGISTRY}/bike-parts-finder-consumer:latest
        imagePullPolicy: Always
        env:
        - name: KAFKA_BROKERS
          value: bike-parts-finder-kafka-bootstrap.kafka.svc.cluster.local:9092
        - name: KAFKA_RESULT_TOPIC
          value: scrape-results
        - name: KAFKA_CONSUMER_GROUP
          value: scrape-results-processor
        - name: DB_HOST
          value: postgres-postgresql.database.svc.cluster.local
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: bikepartsfinder
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: AWS_REGION
          value: us-east-2
        - name: ENVIRONMENT
          value: ${ENVIRONMENT:-develop}
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8082
          initialDelaySeconds: 5
          periodSeconds: 10
