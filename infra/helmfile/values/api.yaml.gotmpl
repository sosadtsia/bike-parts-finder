replicaCount: {{ .Values.api.replicas }}

image:
  repository: {{ .Values.api.image.repository }}
  tag: {{ .Values.api.image.tag }}
  pullPolicy: Always

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/tls-acme: "true"
  hosts:
    - host: api.{{ .Values.domain }}
      paths:
        - path: /
          pathType: Prefix

resources:
  requests:
    memory: {{ .Values.api.resources.requests.memory | quote }}
    cpu: {{ .Values.api.resources.requests.cpu | quote }}
  limits:
    memory: {{ .Values.api.resources.limits.memory | quote }}
    cpu: {{ .Values.api.resources.limits.cpu | quote }}

env:
  - name: PORT
    value: "8080"
  - name: DATABASE_URL
    value: "postgres://{{ .Values.postgres.username }}:{{ .Values.postgres.password }}@postgres:5432/{{ .Values.postgres.database }}?sslmode=disable"
  - name: REDIS_URL
    value: "redis://redis:6379/0"
  - name: KAFKA_BROKERS
    value: "kafka:9092"
  - name: LOG_LEVEL
    value: {{ if eq .Values.api.debug true }}"debug"{{ else }}"info"{{ end }}
  - name: DEBUG
    value: {{ .Values.api.debug | quote }}

livenessProbe:
  httpGet:
    path: /healthz
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /readyz
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 5

autoscaling:
  enabled: {{ eq .Environment.Name "production" }}
  minReplicas: {{ .Values.api.replicas }}
  maxReplicas: {{ mul .Values.api.replicas 3 }}
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
