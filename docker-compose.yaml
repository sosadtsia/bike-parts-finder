---
services:
  api:
    build:
      context: .
      dockerfile: cmd/api/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/bike_parts_finder?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./web/frontend/dist:/app/web/dist
    networks:
      - bikepartsnet

  scraper:
    build:
      context: .
      dockerfile: cmd/scraper/Dockerfile
    environment:
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - bikepartsnet

  consumer:
    build:
      context: .
      dockerfile: cmd/consumer/Dockerfile
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/bike_parts_finder?sslmode=disable
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - bikepartsnet

  postgres:
    image: postgres:17-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=bike_parts_finder
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - bikepartsnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - bikepartsnet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Using Bitnami Kafka which is simpler to configure
  zookeeper:
    image: bitnami/zookeeper:3.9
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - bikepartsnet
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:4.0
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - bikepartsnet
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server=localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafdrop:
    image: obsidiandynamics/kafdrop:4.1.0
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - bikepartsnet

  frontend-builder:
    build:
      context: ./web/frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./web/frontend:/app
      - ./web/frontend/dist:/app/dist
    networks:
      - bikepartsnet

volumes:
  postgres-data:
  redis-data:

networks:
  bikepartsnet:
    driver: bridge
